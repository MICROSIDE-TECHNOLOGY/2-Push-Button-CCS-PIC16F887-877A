CCS PCM C Compiler, Version 5.076, 56587               24-feb.-22 10:07

               Filename:   E:\Martin Hdez\Desktop\CCS 16F\887\Práctica 2\Push Button.lst

               ROM used:   48 words (1%)
                           Largest free fragment is 2048
               RAM used:   5 (1%) at main() level
                           5 (1%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   00B
0003:  NOP
.................... /* 
....................    AUTOR: MICROSIDE TECHNOLOGY S.A. DE C.V. 
....................    FECHA: JUNIO 2019 
.................... */ 
....................  
.................... /* 
.................... --------------------------------------------------------------------------- 
....................  Implementar el control de encendido y apagado de un LED mediante 
....................  un botón pulsador. 
.................... --------------------------------------------------------------------------- 
.................... */ 
....................  
.................... #include <16F887.h>                            //Incluye el microcontrolador con el que se va a trabajar  
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
.................... #use delay(clock=20Mhz, crystal)                //Tipo de oscilador y frecuencia dependiendo del microcontrolador  
....................  
.................... #define LED PIN_A1                              //Asigna el pin A1 al LED del X-TRAINER 
.................... #define BOTON PIN_A2                            //Asigna el pin A2 al boton BOOT del X-TRAINER 
....................  
.................... void SisInit (void) 
....................  
....................  { 
....................      set_tris_a (0b11111101);                   //Pin A1 como salida 
0004:  MOVLW  FD
0005:  BSF    03.5
0006:  MOVWF  05
0007:  BCF    03.5
0008:  BCF    0A.3
0009:  BCF    0A.4
000A:  GOTO   020 (RETURN)
....................  } 
....................  
.................... void main (void) 
000B:  MOVF   03,W
000C:  ANDLW  1F
000D:  MOVWF  03
000E:  BSF    03.5
000F:  BSF    03.6
0010:  MOVF   09,W
0011:  ANDLW  C0
0012:  MOVWF  09
0013:  BCF    03.6
0014:  BCF    1F.4
0015:  BCF    1F.5
0016:  MOVLW  00
0017:  BSF    03.6
0018:  MOVWF  08
0019:  BCF    03.5
001A:  CLRF   07
001B:  CLRF   08
001C:  CLRF   09
001D:  BCF    03.7
....................  { 
....................    SisInit (); 
001E:  BCF    03.6
001F:  GOTO   004
....................  
....................    while (1)                                     //Ciclo repetitivo 
....................     
....................    { 
....................     if (0 == input (BOTON))                      //Lee el estado del boton 
0020:  BSF    03.5
0021:  BSF    05.2
0022:  BCF    03.5
0023:  BTFSC  05.2
0024:  GOTO   02A
....................       { 
....................        output_high (LED);                        //Si se presiona el boton enciende el LED 
0025:  BSF    03.5
0026:  BCF    05.1
0027:  BCF    03.5
0028:  BSF    05.1
....................       } 
0029:  GOTO   02E
....................  
....................      else 
....................  
....................      { 
....................       output_low (LED);                          //De lo contrario el LED se apaga 
002A:  BSF    03.5
002B:  BCF    05.1
002C:  BCF    03.5
002D:  BCF    05.1
....................      } 
002E:  GOTO   020
....................  
....................    } 
....................  
.................... } 
002F:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
